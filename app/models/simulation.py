"""
Database models for the simulation engine.
Handles GlobalEvents and ClaraGlobalState for the "Day in the Life" simulation.
"""

from sqlalchemy import Integer, String, DateTime, Text, Boolean
from sqlalchemy.sql import func
from sqlalchemy.orm import Mapped, mapped_column
from sqlalchemy.dialects.postgresql import UUID
from typing import Optional
import uuid
from app.core.database import Base


class GlobalEvents(Base):
    """
    Global events generated by the simulation engine.
    These represent significant events in Clara's daily life.
    """
    __tablename__ = "global_events"

    event_id: Mapped[str] = mapped_column(
        String,
        primary_key=True,
        default=lambda: str(uuid.uuid4()),
        index=True
    )
    event_type: Mapped[str] = mapped_column(
        String(20),
        nullable=False,
        index=True,
        comment="Event category: 'work', 'social', 'personal'"
    )
    summary: Mapped[str] = mapped_column(
        Text,
        nullable=False,
        comment="Brief description of the event"
    )
    timestamp: Mapped[DateTime] = mapped_column(
        DateTime(timezone=True),
        server_default=func.now(),
        index=True,
        comment="When the event occurred"
    )
    status: Mapped[str] = mapped_column(
        String(20),
        nullable=False,
        default="unprocessed",
        index=True,
        comment="Processing status: 'unprocessed', 'processed'"
    )

    # Additional metadata for event context
    intensity: Mapped[Optional[int]] = mapped_column(
        Integer,
        comment="Event intensity level (1-10)"
    )
    impact_mood: Mapped[Optional[str]] = mapped_column(
        String(20),
        comment="Expected mood impact: 'positive', 'negative', 'neutral'"
    )
    impact_energy: Mapped[Optional[str]] = mapped_column(
        String(20),
        comment="Expected energy impact: 'increase', 'decrease', 'neutral'"
    )
    impact_stress: Mapped[Optional[str]] = mapped_column(
        String(20),
        comment="Expected stress impact: 'increase', 'decrease', 'neutral'"
    )

    # Consciousness response data
    emotional_reaction: Mapped[Optional[str]] = mapped_column(
        Text,
        comment="Clara's emotional reaction to this event"
    )
    chosen_action: Mapped[Optional[str]] = mapped_column(
        Text,
        comment="Action Clara chose in response to this event"
    )
    internal_thoughts: Mapped[Optional[str]] = mapped_column(
        Text,
        comment="Clara's internal thoughts about this event"
    )
    consciousness_raw_response: Mapped[Optional[str]] = mapped_column(
        Text,
        comment="Raw LLM response for debugging"
    )

    # Processing metadata
    processed_at: Mapped[Optional[DateTime]] = mapped_column(
        DateTime(timezone=True),
        comment="When the event was processed by the consciousness engine"
    )
    created_by: Mapped[str] = mapped_column(
        String(50),
        default="simulation_engine",
        comment="System component that created this event"
    )

    def __repr__(self):
        return f"<GlobalEvents(event_id='{self.event_id}', type='{self.event_type}', status='{self.status}')>"


class ClaraGlobalState(Base):
    """
    Extended global state tracking for Clara's persistent attributes.
    This extends the existing ClaraState model with simulation-specific traits.
    """
    __tablename__ = "clara_global_state"

    state_id: Mapped[int] = mapped_column(Integer, primary_key=True, index=True)
    trait_name: Mapped[str] = mapped_column(
        String(50),
        unique=True,
        index=True,
        nullable=False,
        comment="Trait identifier: 'stress', 'energy', 'mood', etc."
    )
    value: Mapped[str] = mapped_column(
        String(100),
        nullable=False,
        comment="Current trait value (string or numeric as string)"
    )
    numeric_value: Mapped[Optional[int]] = mapped_column(
        Integer,
        comment="Numeric representation for calculations (0-100 scale)"
    )
    last_updated: Mapped[DateTime] = mapped_column(
        DateTime(timezone=True),
        server_default=func.now(),
        onupdate=func.now(),
        index=True
    )

    # Simulation metadata
    last_event_id: Mapped[Optional[str]] = mapped_column(
        String,
        comment="ID of the last event that modified this trait"
    )
    change_reason: Mapped[Optional[str]] = mapped_column(
        String(200),
        comment="Brief explanation of what caused the last change"
    )
    trend: Mapped[Optional[str]] = mapped_column(
        String(20),
        comment="Recent trend: 'increasing', 'decreasing', 'stable'"
    )

    # Validation constraints
    min_value: Mapped[Optional[int]] = mapped_column(
        Integer,
        default=0,
        comment="Minimum allowed value for this trait"
    )
    max_value: Mapped[Optional[int]] = mapped_column(
        Integer,
        default=100,
        comment="Maximum allowed value for this trait"
    )

    def __repr__(self):
        return f"<ClaraGlobalState(trait='{self.trait_name}', value='{self.value}', numeric='{self.numeric_value}')"


class SimulationLog(Base):
    """
    Audit log for simulation engine operations.
    Tracks system events and debugging information.
    """
    __tablename__ = "simulation_log"

    log_id: Mapped[int] = mapped_column(Integer, primary_key=True, index=True)
    timestamp: Mapped[DateTime] = mapped_column(
        DateTime(timezone=True),
        server_default=func.now(),
        index=True
    )
    level: Mapped[str] = mapped_column(
        String(10),
        nullable=False,
        index=True,
        comment="Log level: 'INFO', 'WARN', 'ERROR', 'DEBUG'"
    )
    component: Mapped[str] = mapped_column(
        String(50),
        nullable=False,
        index=True,
        comment="System component: 'event_generator', 'state_manager', etc."
    )
    message: Mapped[str] = mapped_column(
        Text,
        nullable=False,
        comment="Log message content"
    )

    # Optional context data
    event_id: Mapped[Optional[str]] = mapped_column(
        String,
        comment="Related event ID if applicable"
    )
    user_id: Mapped[Optional[str]] = mapped_column(
        String,
        comment="Related user ID if applicable"
    )
    extra_data: Mapped[Optional[str]] = mapped_column(
        Text,
        comment="Additional metadata as JSON string"
    )

    def __repr__(self):
        return f"<SimulationLog(level='{self.level}', component='{self.component}', timestamp='{self.timestamp}')>"


class SimulationConfig(Base):
    """
    Configuration settings for the simulation engine.
    Allows runtime adjustment of simulation parameters.
    """
    __tablename__ = "simulation_config"

    config_id: Mapped[int] = mapped_column(Integer, primary_key=True, index=True)
    key: Mapped[str] = mapped_column(
        String(100),
        unique=True,
        index=True,
        nullable=False,
        comment="Configuration key identifier"
    )
    value: Mapped[str] = mapped_column(
        String(500),
        nullable=False,
        comment="Configuration value"
    )
    description: Mapped[Optional[str]] = mapped_column(
        Text,
        comment="Human-readable description of this setting"
    )
    category: Mapped[str] = mapped_column(
        String(50),
        default="general",
        index=True,
        comment="Configuration category: 'event_generation', 'timing', 'thresholds'"
    )
    is_active: Mapped[bool] = mapped_column(
        Boolean,
        default=True,
        index=True,
        comment="Whether this configuration is currently active"
    )
    last_updated: Mapped[DateTime] = mapped_column(
        DateTime(timezone=True),
        server_default=func.now(),
        onupdate=func.now()
    )

    def __repr__(self):
        return f"<SimulationConfig(key='{self.key}', value='{self.value}', active={self.is_active})>"