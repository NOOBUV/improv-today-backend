"""
Database models for the Daily Journal Generator.
Handles journal entries storage and management.
"""

from sqlalchemy import Integer, String, DateTime, Text, Date, JSON, Boolean
from sqlalchemy.sql import func
from sqlalchemy.orm import Mapped, mapped_column
from typing import Optional, Dict, Any
import uuid
from app.core.database import Base


class JournalEntries(Base):
    """
    Daily journal entries generated by the journal generation system.
    Stores Ava's daily reflections for social media content.
    """
    __tablename__ = "journal_entries"

    entry_id: Mapped[str] = mapped_column(
        String,
        primary_key=True,
        default=lambda: str(uuid.uuid4()),
        index=True,
        comment="Unique identifier for the journal entry"
    )

    entry_date: Mapped[Date] = mapped_column(
        Date,
        nullable=False,
        unique=True,
        index=True,
        comment="Date this journal entry is for (one per day)"
    )

    content: Mapped[str] = mapped_column(
        Text,
        nullable=False,
        comment="The journal entry content (Fleabag-inspired narrative)"
    )

    status: Mapped[str] = mapped_column(
        String(20),
        nullable=False,
        default="draft",
        index=True,
        comment="Entry status: 'draft', 'approved', 'posted'"
    )

    # Generation metadata
    events_processed: Mapped[Optional[int]] = mapped_column(
        Integer,
        comment="Number of GlobalEvents processed for this entry"
    )

    emotional_theme: Mapped[Optional[str]] = mapped_column(
        String(50),
        comment="Dominant emotional theme: 'positive', 'negative', 'neutral', 'mixed'"
    )

    generated_at: Mapped[DateTime] = mapped_column(
        DateTime(timezone=True),
        server_default=func.now(),
        index=True,
        comment="When this entry was generated"
    )

    # Review and publishing workflow
    reviewed_at: Mapped[Optional[DateTime]] = mapped_column(
        DateTime(timezone=True),
        comment="When this entry was reviewed by admin"
    )

    reviewed_by: Mapped[Optional[str]] = mapped_column(
        String(100),
        comment="Admin user who reviewed this entry"
    )

    published_at: Mapped[Optional[DateTime]] = mapped_column(
        DateTime(timezone=True),
        comment="When this entry was published to social media"
    )

    # Content quality metadata
    character_count: Mapped[Optional[int]] = mapped_column(
        Integer,
        comment="Character count for social media optimization"
    )

    readability_score: Mapped[Optional[float]] = mapped_column(
        String(10),  # Store as string to handle various scoring formats
        comment="Text readability score for quality assessment"
    )

    # Editorial notes
    admin_notes: Mapped[Optional[str]] = mapped_column(
        Text,
        comment="Admin notes about this entry (editing suggestions, etc.)"
    )

    # Audit trail
    created_at: Mapped[DateTime] = mapped_column(
        DateTime(timezone=True),
        server_default=func.now(),
        index=True
    )

    updated_at: Mapped[Optional[DateTime]] = mapped_column(
        DateTime(timezone=True),
        onupdate=func.now(),
        comment="Last modification timestamp"
    )

    # JSON field for flexible metadata
    metadata_json: Mapped[Optional[Dict[str, Any]]] = mapped_column(
        JSON,
        comment="Additional metadata (source events, generation params, etc.)"
    )

    def __repr__(self):
        return f"<JournalEntries(entry_id='{self.entry_id}', date='{self.entry_date}', status='{self.status}')>"


class JournalGenerationLog(Base):
    """
    Audit log for journal generation attempts and results.
    Tracks generation success/failure and debugging information.
    """
    __tablename__ = "journal_generation_log"

    log_id: Mapped[int] = mapped_column(Integer, primary_key=True, index=True)

    target_date: Mapped[Date] = mapped_column(
        Date,
        nullable=False,
        index=True,
        comment="Date the journal generation was attempted for"
    )

    status: Mapped[str] = mapped_column(
        String(20),
        nullable=False,
        index=True,
        comment="Generation status: 'success', 'failure', 'no_events', 'skipped'"
    )

    events_found: Mapped[int] = mapped_column(
        Integer,
        default=0,
        comment="Number of events found for the target date"
    )

    events_processed: Mapped[int] = mapped_column(
        Integer,
        default=0,
        comment="Number of events actually processed"
    )

    generation_duration_ms: Mapped[Optional[int]] = mapped_column(
        Integer,
        comment="Time taken for generation in milliseconds"
    )

    llm_model_used: Mapped[Optional[str]] = mapped_column(
        String(50),
        comment="LLM model used for generation"
    )

    error_message: Mapped[Optional[str]] = mapped_column(
        Text,
        comment="Error message if generation failed"
    )

    created_at: Mapped[DateTime] = mapped_column(
        DateTime(timezone=True),
        server_default=func.now(),
        index=True
    )

    # Generation context
    emotional_context: Mapped[Optional[Dict[str, Any]]] = mapped_column(
        JSON,
        comment="Emotional state and context at time of generation"
    )

    # Task metadata
    celery_task_id: Mapped[Optional[str]] = mapped_column(
        String(100),
        comment="Celery task ID for this generation attempt"
    )

    triggered_by: Mapped[str] = mapped_column(
        String(50),
        default="scheduled",
        comment="What triggered this generation: 'scheduled', 'manual', 'api'"
    )

    def __repr__(self):
        return f"<JournalGenerationLog(target_date='{self.target_date}', status='{self.status}', events={self.events_found})>"


class JournalTemplate(Base):
    """
    Reusable journal entry templates for different emotional themes and scenarios.
    Allows for consistent voice while providing variety.
    """
    __tablename__ = "journal_templates"

    template_id: Mapped[int] = mapped_column(Integer, primary_key=True, index=True)

    name: Mapped[str] = mapped_column(
        String(100),
        nullable=False,
        unique=True,
        comment="Template name for identification"
    )

    emotional_theme: Mapped[str] = mapped_column(
        String(50),
        nullable=False,
        index=True,
        comment="Target emotional theme: 'positive', 'negative', 'neutral', 'chaotic'"
    )

    template_content: Mapped[str] = mapped_column(
        Text,
        nullable=False,
        comment="Template text with placeholders for dynamic content"
    )

    usage_count: Mapped[int] = mapped_column(
        Integer,
        default=0,
        comment="Number of times this template has been used"
    )

    is_active: Mapped[bool] = mapped_column(
        Boolean,
        default=True,
        index=True,
        comment="Whether this template is currently active"
    )

    created_at: Mapped[DateTime] = mapped_column(
        DateTime(timezone=True),
        server_default=func.now()
    )

    last_used: Mapped[Optional[DateTime]] = mapped_column(
        DateTime(timezone=True),
        comment="When this template was last used"
    )

    # Quality metrics
    avg_engagement_score: Mapped[Optional[float]] = mapped_column(
        String(10),
        comment="Average engagement score when this template is used"
    )

    notes: Mapped[Optional[str]] = mapped_column(
        Text,
        comment="Notes about when and how to use this template"
    )

    def __repr__(self):
        return f"<JournalTemplate(name='{self.name}', theme='{self.emotional_theme}', active={self.is_active})>"